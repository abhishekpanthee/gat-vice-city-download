#!/bin/bash

### Wine standalone script
###re-modified by Abhishek-Pannthee

# Forbid root rights
if [ ! "$ROOT" ] && [ "$EUID" == "0" ]
then
echo -e "\e[91m"
echo "#####################################################################"
echo "Don't use the sudo command or the root user to execute these scripts!"
echo "  Не стартирайте този скрипт с командата sudo или от потребителя root!"
echo "#####################################################################"
exit
fi

## Variables

# User
export USER="$(id -u -n)"

# Directory
export SCRIPT="$(readlink -f "${BASH_SOURCE[0]}")"
export DIR="$(dirname "$SCRIPT")"
export RHOME="$HOME"
export HOME="$DIR/home"

# Wine binaries
export USESYSWINE="no"
export WINETRICKS="$DIR/winetricks"

if [ "$USESYSWINE" == "yes" ]
then if [ -f "$DIR/syswine" ]
	then source "$DIR/syswine"
	fi

	if [ ! -f "$WINE" ]
	then if [ -f "/usr/bin/wine" ]
	then export WINE="/usr/bin/wine"
		export REGEDIT="/usr/bin/regedit"
		elif [ -f "/usr/bin/wine-development" ]
	then export WINE="/usr/bin/wine-development"
		export REGEDIT="/usr/bin/regedit-development"
		elif [ -f "/usr/local/bin/wine" ]
	then export WINE="/usr/local/bin/wine"
		export REGEDIT="/usr/local/bin/regedit"
		fi

	if [ "$WINE" ]
	then rm -f "$DIR/syswine"
		echo "export WINE='$WINE'" >> "$DIR/syswine"
		echo "export REGEDIT='$REGEDIT'" >> "$DIR/syswine"
		fi
	fi
elif [ -f "$DIR/syswine" ]
then rm "$DIR/syswine"
fi

if [ ! "$WINE" ]
then export WINE="$DIR/wine/bin/wine"
	export REGEDIT="$DIR/wine/bin/regedit"
fi

# Wine
export WINEPREFIX="$DIR/prefix"

#######################
export WINEDEBUG="-all"
#######################

export WINE_VERSION="$("$WINE" --version)"
export WINEDLLOVERRIDES="mscoree,mshtml="
export UPDATEPREFIX="yes"

################
export CSMT="on"
################

# Game
############################
export GAME_NAME="GTA Vice City"
export EXE="gta-vc.exe"
export GAME_FOLDER="$WINEPREFIX/drive_c/Program Files/Mr DJ/Grand Theft Auto Vice City/"
#############################################

# Screen
####################
export WINDOWED="no"
export RESOLUTION="1366x768"
export FIXRES="no"
##################

# Sound
####################
export USEALSA="yes"
####################

# Cores
export CORES="$(getconf _NPROCESSORS_ONLN)"

## Actions

# Exit if the files do not exist
if [ ! -f "$WINE" ] || [ ! -f "$WINETRICKS" ] || [ ! -d "$GAME_FOLDER" ]
then clear
	echo "Липсват файлове:"
	echo

	if [ ! -f "$WINE" ]
	then echo "$WINE"
	fi

	if [ ! -f "$WINETRICKS" ]
	then echo "$WINETRICKS"
	fi

	if [ ! -d "$GAME_FOLDER" ]
	then echo "$GAME_FOLDER"
	fi

	exit
fi

# Create a home directory
if [ "$HOME" == "$DIR/home" ] && [ ! -d "$HOME" ]
then mkdir "$HOME"
fi

# Copy pulse config
if [ "$HOME" == "$DIR/home" ]
then if [ ! -d "$HOME/.config" ]
	then mkdir -p "$HOME/.config"
	fi

	if [ ! -d "$HOME/.config/pulse" ]
	then cp -R "$RHOME/.config/pulse" "$HOME/.config"
	fi
fi

# Update prefix
if [ "$UPDATEPREFIX" == "yes" ]
then if [ ! -d "$WINEPREFIX/drive_c/users/$USER" ]
	then "$DIR/wine/bin/wineboot" -u
	# Disable GStreamer
	"$WINETRICKS" winegstreamer=disabled
	fi
fi

# Turn sound
if [ "$USEALSA" == "yes" ] && [ ! -f "$DIR/alsa" ]
then "$WINETRICKS" sound=alsa
	echo > "$DIR/alsa"
	rm -f "$DIR/pulse"
elif [ "$USEALSA" == "no" ] && [ ! -f "$DIR/pulse" ]
then "$WINETRICKS" sound=pulse
	echo > "$DIR/pulse"
	rm -f "$DIR/alsa"
fi

# Disable CSMT on 1-core CPU
if [ "$CORES" == "1" ]
then export CSMT="off"
fi

# Disable CSMT on non-Staging Wine
if [ "$CSMT" == "on" ] && [[ ! "$WINE_VERSION" == *"Staging"* ]]
then export CSMT="off"
fi

# Enable/Disable CSMT
if [ -f "$DIR/wine/share/wine/csmt.reg" ] && [ -f "$DIR/wine/share/wine/non-csmt.reg" ]
then if [ -f "$DIR/csmt_on" ] && [ "$CSMT" == "off" ]
	then "$REGEDIT" "$DIR/wine/share/wine/non-csmt.reg"
		rm "$DIR/csmt_on"
	elif [ ! -f "$DIR/csmt_on" ] && [ "$CSMT" == "on" ]
	then "$REGEDIT" "$DIR/wine/share/wine/csmt.reg"
		echo > "$DIR/csmt_on"
	fi
fi

# Get native screen resolution
if [ "$FIXRES" == "yes" ]
then if [ "$WINDOWED" == "no" ] && [ ! "$1" == "-sw" ] && [ -f "/usr/bin/xrandr" ]
	then export RESOLUTION="$(xrandr -q | awk -F'current' -F',' 'NR==1 {gsub("( |current)","");print $2}')"
	else export FIXRES="no"
	fi
fi

# Info output
clear
echo "$WINE_VERSION"
echo "csmt: $CSMT"
echo "##################"
echo "game:    $GAME_NAME"
echo "version: $GAME_VERSION"
echo "##################"
echo "home: $HOME"
echo

# Start the game
#################
cd "$GAME_FOLDER"
if [ "$WINDOWED" == "yes" ] || [ "$1" == "-sw" ]
then "$WINE" explorer /desktop=Game,$RESOLUTION "$EXE"
else "$WINE" "$EXE"

## Performance Threaded Dispatch
# NVIDIA
#else __GL_THREADED_OPTIMIZATIONS=1 "$WINE" "$EXE"

# Intel
#else mesa_glthread=true "$WINE" "$EXE"
fi
#######################################

# Restore screen resolution
if [ "$FIXRES" == "yes" ]
then "/usr/bin/xrandr" -s "$RESOLUTION"
fi
